// ------------------------------------------- BFT -------------------------------------------

import java.util.*;
class Graph {

	
	public void addEdge(ArrayList<ArrayList<Integer> > adj,
						int source, int dest)
	{
		adj.get(source).add(dest);
	}

	
	public void
	printGraph(ArrayList<ArrayList<Integer> > adj)
	{
		for (int i = 0; i < adj.size(); i++) {
			System.out.println("\nAdjacency list of vertex"
							+ i);
			System.out.print("head");
			for (int j = 0; j < adj.get(i).size(); j++) {
				System.out.print(" -> "
								+ adj.get(i).get(j));
			}
			System.out.println();
		}
	}
	}
class BFS
{	
	public static void bfs(int source,ArrayList<ArrayList<Integer>> adj,boolean[] isvisited)
	{
		Queue<Integer> queue = new LinkedList<>();
		
	
		isvisited[source]=true;
		queue.add(source);
		
		while(!queue.isEmpty())
		{
			int curr = queue.poll();
			System.out.println(curr);
			
			for(int i=0;i<adj.get(curr).size();i++)
			{
				int neigh = adj.get(curr).get(i);
				if(isvisited[neigh]==false)
				{
					isvisited[neigh]=true;
					queue.add(neigh);
				}
			}
		}
	
	}
	
	public static void main(String[] args)
	{
		// Creating a graph with 4 vertices
		int V = 7;
		ArrayList<ArrayList<Integer> > adj
			= new ArrayList<ArrayList<Integer> >(V);

		for (int i = 0; i < V; i++)
			adj.add(new ArrayList<Integer>());

		// Adding edges one by one
		Graph g = new Graph();
		g.addEdge(adj,0, 1);
        g.addEdge(adj,0, 2);
        g.addEdge(adj,1, 2);
        g.addEdge(adj,1, 3);
        g.addEdge(adj,2, 3);
        g.addEdge(adj,4, 5);
		g.addEdge(adj,4, 6);
	
		
		boolean[] vis = new boolean[V];
		
		for(int i=0;i<V;i++)
		{
			if(vis[i]==false)
				bfs(i,adj,vis);
		}
			
		
	}
}
	

// ---------------------------------------- DFT ---------------------------------------------

import java.io.*;
import java.util.*;


class Graph {
    private int V;

    private LinkedList<Integer> adj[];

    Graph(int v)
    {
        V = v;
        adj = new LinkedList[v];
        for (int i = 0; i < v; ++i)
            adj[i] = new LinkedList();
    }


    void addEdge(int src, int dst)
    {
        adj[src].add(dst);
    }

    // A function used by DFS
    void DFSUtil(int v, boolean visited[])
    {
       
        visited[v] = true;
        System.out.print(v + " ");

        Iterator<Integer> i = adj[v].listIterator();
        while (i.hasNext()) {
            int n = i.next();
            if (!visited[n])
                DFSUtil(n, visited);
        }
    }

    
    void DFS()
    {
        
        boolean visited[] = new boolean[V];
		
        for (int i = 0; i < V; ++i)
            if (visited[i] == false)
                DFSUtil(i, visited);
    }

    // Driver's Code
    public static void main(String args[])
    {
        Graph g = new Graph(4);

        g.addEdge(0, 1);
        g.addEdge(0, 2);
        g.addEdge(1, 2);
        g.addEdge(2, 0);
        g.addEdge(2, 3);
        g.addEdge(3, 3);

        System.out.println(
            "Following is Depth First Traversal");

        // Function call
        g.DFS();
    }
}